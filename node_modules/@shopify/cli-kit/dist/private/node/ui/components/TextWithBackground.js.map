{"version":3,"file":"TextWithBackground.js","sourceRoot":"","sources":["../../../../../src/private/node/ui/components/TextWithBackground.tsx"],"names":[],"mappings":"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","sourcesContent":["import useLayout from '../hooks/use-layout.js'\nimport {Box, Text} from 'ink'\nimport React, {FunctionComponent, useCallback} from 'react'\nimport chalk, {ForegroundColor} from 'chalk'\n\ninterface TopBottomPaddingProps {\n  padding: number\n  color?: ForegroundColor\n  width: number\n  inverse?: boolean\n}\n\nconst TopBottomPadding: FunctionComponent<TopBottomPaddingProps> = ({padding, color, width, inverse}) => {\n  return (\n    <>\n      {[...Array(padding).keys()].map((index) => (\n        <Text key={index} backgroundColor={color} inverse={inverse}>\n          {' '.repeat(width)}\n        </Text>\n      ))}\n    </>\n  )\n}\n\ninterface TextWithBackgroundProps {\n  text: string\n  backgroundColor?: ForegroundColor\n  inverse?: boolean\n  padding?: number\n  paddingX?: number\n  paddingY?: number\n}\n\nconst TextWithBackground: FunctionComponent<TextWithBackgroundProps> = ({\n  backgroundColor,\n  inverse,\n  padding,\n  paddingX,\n  paddingY,\n  text,\n}) => {\n  const pY = (padding ? padding : paddingY) ?? 0\n  const pX = (padding ? padding : paddingX) ?? 0\n  const color = backgroundColor\n  const {fullWidth: width} = useLayout()\n  const textWidth = width - pX * 2\n  let colorName: string\n\n  if (color) {\n    colorName = `bg${color[0]!.toUpperCase() + color.slice(1)}`\n  } else if (inverse) {\n    colorName = 'inverse'\n  } else {\n    throw new Error('Either backgroundColor or inverse must be set')\n  }\n\n  const textTransform = useCallback(\n    (textToTransform: string) => {\n      // split text into lines of width length\n      const lines = textToTransform.match(new RegExp(`.{1,${textWidth}}`, 'g')) || []\n      // pad each line to width length\n      const paddedLines = lines.map((line) => `${' '.repeat(pX)}${line}${' '.repeat(pX)}`.padEnd(width, ' '))\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      return (chalk as any)[colorName](paddedLines.join('\\n'))\n    },\n    [colorName, pX, textWidth],\n  )\n\n  return (\n    <Box flexDirection=\"column\">\n      {pY ? <TopBottomPadding padding={pY} color={color} width={width} inverse={inverse} /> : null}\n\n      <Box flexGrow={1}>\n        <Text>{textTransform(text)}</Text>\n      </Box>\n\n      {pY ? <TopBottomPadding padding={pY} color={color} width={width} inverse={inverse} /> : null}\n    </Box>\n  )\n}\n\nexport {TextWithBackground}\n"]}