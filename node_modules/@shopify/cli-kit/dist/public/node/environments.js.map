{"version":3,"file":"environments.js","sourceRoot":"","sources":["../../../src/public/node/environments.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,UAAU,EAAC,MAAM,WAAW,CAAA;AACpC,OAAO,EAAC,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAC,MAAM,SAAS,CAAA;AACxD,OAAO,EAAC,QAAQ,EAAC,MAAM,WAAW,CAAA;AAGlC,MAAM,CAAC,MAAM,oBAAoB,GAAG,2BAA2B,CAAA;AAK/D;;;;;;GAMG;AACH,MAAM,CAAC,KAAK,UAAU,6BAA6B,CAAC,GAAW,EAAE,IAAwB;IACvF,IAAI,oBAAwC,CAAA;IAC5C,IAAI,IAAI,EAAE,MAAM,EAAE;QAChB,oBAAoB,GAAG,MAAM,UAAU,CAAC,oBAAoB,EAAE;YAC5D,GAAG,EAAE,GAAG;YACR,IAAI,EAAE,MAAM;SACb,CAAC,CAAA;KACH;SAAM;QACL,MAAM,2BAA2B,GAAG,QAAQ,CAAC,GAAG,EAAE,oBAAoB,CAAC,CAAA;QACvE,IAAI,MAAM,UAAU,CAAC,2BAA2B,CAAC,EAAE;YACjD,oBAAoB,GAAG,2BAA2B,CAAA;SACnD;KACF;IACD,IAAI,oBAAoB,EAAE;QACxB,OAAO,UAAU,CAAC,MAAM,QAAQ,CAAC,oBAAoB,CAAC,CAAiB,CAAA;KACxE;SAAM;QACL,OAAO,EAAE,CAAA;KACV;AACH,CAAC","sourcesContent":["import {decodeToml} from './toml.js'\nimport {fileExists, readFile, findPathUp} from './fs.js'\nimport {joinPath} from './path.js'\nimport {JsonMap} from '../../private/common/json.js'\n\nexport const environmentsFilename = 'shopify.environments.toml'\n\nexport interface Environments {\n  [name: string]: JsonMap\n}\n/**\n * Loads environments from a directory.\n * @param dir - The directory to load environments from.\n * @param opts - Options for loading environments, including:\n * - findUp: whether to search upwards for an environments file.\n * @returns The loaded environments.\n */\nexport async function loadEnvironmentsFromDirectory(dir: string, opts?: {findUp: boolean}): Promise<Environments> {\n  let environmentsFilePath: string | undefined\n  if (opts?.findUp) {\n    environmentsFilePath = await findPathUp(environmentsFilename, {\n      cwd: dir,\n      type: 'file',\n    })\n  } else {\n    const allowedEnvironmentsFilePath = joinPath(dir, environmentsFilename)\n    if (await fileExists(allowedEnvironmentsFilePath)) {\n      environmentsFilePath = allowedEnvironmentsFilePath\n    }\n  }\n  if (environmentsFilePath) {\n    return decodeToml(await readFile(environmentsFilePath)) as Environments\n  } else {\n    return {}\n  }\n}\n"]}