{"version":3,"file":"generate-schema.js","sourceRoot":"","sources":["../../../src/cli/services/generate-schema.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,4BAA4B,EAAC,MAAM,cAAc,CAAA;AAEzD,OAAO,EAAC,iBAAiB,EAAC,MAAM,8BAA8B,CAAA;AAC9D,OAAO,EACL,wBAAwB,GAGzB,MAAM,mDAAmD,CAAA;AAG1D,OAAO,EAAC,eAAe,EAAC,MAAM,oCAAoC,CAAA;AAClE,OAAO,EAAC,2BAA2B,EAAC,MAAM,+BAA+B,CAAA;AACzE,OAAO,EAAC,qBAAqB,EAAC,MAAM,qCAAqC,CAAA;AACzE,OAAO,EAAC,UAAU,EAAC,MAAM,6BAA6B,CAAA;AACtD,OAAO,EAAC,aAAa,EAAE,UAAU,EAAC,MAAM,8BAA8B,CAAA;AACtE,OAAO,EAAC,SAAS,EAAC,MAAM,0BAA0B,CAAA;AAClD,OAAO,EAAC,QAAQ,EAAC,MAAM,4BAA4B,CAAA;AAUnD,MAAM,CAAC,KAAK,UAAU,qBAAqB,CAAC,OAA8B;IACxE,MAAM,EAAC,SAAS,EAAE,GAAG,EAAC,GAAG,OAAO,CAAA;IAChC,MAAM,KAAK,GAAG,MAAM,2BAA2B,EAAE,CAAA;IACjD,MAAM,EAAC,WAAW,EAAE,OAAO,EAAE,IAAI,EAAC,GAAG,SAAS,CAAC,aAAa,CAAA;IAC5D,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,IAAI,iBAAiB,CAAC,EAAC,GAAG,EAAC,CAAC,CAAC,GAAG,CAAA;IAC3D,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,CAAA;IAE7B,IAAI,CAAC,MAAM,EAAE;QACX,IAAI,CAAC,qBAAqB,EAAE,EAAE;YAC5B,MAAM,IAAI,UAAU,CAClB,aAAa,CAAA,4BAA4B,EACzC,aAAa,CAAA,gDAAgD,CAC9D,CAAA;SACF;QAED,MAAM,GAAG,CAAC,MAAM,4BAA4B,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC,MAAM,CAAA;KACjE;IAED,MAAM,KAAK,GAAG,wBAAwB,CAAA;IACtC,MAAM,SAAS,GAAsC;QACnD,MAAM;QACN,OAAO;QACP,IAAI;KACL,CAAA;IACD,MAAM,QAAQ,GAAmC,MAAM,eAAe,CAAC,KAAK,EAAE,KAAK,EAAE,SAAS,CAAC,CAAA;IAE/F,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE;QACxB,MAAM,IAAI,UAAU,CAClB,aAAa,CAAA,uCAAuC,SAAS,CAAC,eAAe,EAAE,EAC/E,aAAa,CAAA,yDAAyD,CACvE,CAAA;KACF;IAED,IAAI,MAAM,EAAE;QACV,UAAU,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAA;KAChC;SAAM;QACL,MAAM,UAAU,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,EAAE,gBAAgB,CAAC,CAAA;QAC3D,MAAM,SAAS,CAAC,UAAU,EAAE,QAAQ,CAAC,UAAU,CAAC,CAAA;QAChD,UAAU,CAAC,sBAAsB,SAAS,CAAC,eAAe,eAAe,UAAU,EAAE,CAAC,CAAA;KACvF;AACH,CAAC","sourcesContent":["import {fetchOrCreateOrganizationApp} from './context.js'\nimport {AppInterface} from '../models/app/app.js'\nimport {getAppIdentifiers} from '../models/app/identifiers.js'\nimport {\n  ApiSchemaDefinitionQuery,\n  ApiSchemaDefinitionQuerySchema,\n  ApiSchemaDefinitionQueryVariables,\n} from '../api/graphql/functions/api_schema_definition.js'\nimport {ExtensionInstance} from '../models/extensions/extension-instance.js'\nimport {FunctionConfigType} from '../models/extensions/specifications/function.js'\nimport {partnersRequest} from '@shopify/cli-kit/node/api/partners'\nimport {ensureAuthenticatedPartners} from '@shopify/cli-kit/node/session'\nimport {isTerminalInteractive} from '@shopify/cli-kit/node/context/local'\nimport {AbortError} from '@shopify/cli-kit/node/error'\nimport {outputContent, outputInfo} from '@shopify/cli-kit/node/output'\nimport {writeFile} from '@shopify/cli-kit/node/fs'\nimport {joinPath} from '@shopify/cli-kit/node/path'\n\ninterface GenerateSchemaOptions {\n  app: AppInterface\n  extension: ExtensionInstance<FunctionConfigType>\n  apiKey?: string\n  stdout: boolean\n  path: string\n}\n\nexport async function generateSchemaService(options: GenerateSchemaOptions) {\n  const {extension, app} = options\n  const token = await ensureAuthenticatedPartners()\n  const {api_version: version, type} = extension.configuration\n  let apiKey = options.apiKey || getAppIdentifiers({app}).app\n  const stdout = options.stdout\n\n  if (!apiKey) {\n    if (!isTerminalInteractive()) {\n      throw new AbortError(\n        outputContent`No Client ID was provided.`,\n        outputContent`Provide a Client ID with the --client-id flag.`,\n      )\n    }\n\n    apiKey = (await fetchOrCreateOrganizationApp(app, token)).apiKey\n  }\n\n  const query = ApiSchemaDefinitionQuery\n  const variables: ApiSchemaDefinitionQueryVariables = {\n    apiKey,\n    version,\n    type,\n  }\n  const response: ApiSchemaDefinitionQuerySchema = await partnersRequest(query, token, variables)\n\n  if (!response.definition) {\n    throw new AbortError(\n      outputContent`A schema could not be generated for ${extension.localIdentifier}`,\n      outputContent`Check that the Function API type and version are valid.`,\n    )\n  }\n\n  if (stdout) {\n    outputInfo(response.definition)\n  } else {\n    const outputPath = joinPath(options.path, 'schema.graphql')\n    await writeFile(outputPath, response.definition)\n    outputInfo(`GraphQL Schema for ${extension.localIdentifier} written to ${outputPath}`)\n  }\n}\n"]}