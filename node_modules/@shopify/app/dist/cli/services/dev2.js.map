{"version":3,"file":"dev2.js","sourceRoot":"","sources":["../../../src/cli/services/dev2.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  FrontendURLOptions,\n  PartnersURLs,\n  generateFrontendURL,\n  generatePartnersURLs,\n  getURLs,\n  shouldOrPromptUpdateURLs,\n  startTunnelPlugin,\n  updateURLs,\n} from './dev/urls.js'\nimport {DevOptions, logMetadataForDev, scopesMessage, setPreviousAppId, validateCustomPorts} from './dev.js'\nimport {ensureDevContext} from './context.js'\nimport {fetchSpecifications} from './generate/fetch-extension-specifications.js'\nimport {installAppDependencies} from './dependencies.js'\nimport {DevConfig, DevProcesses, setupDevProcesses} from './dev/processes/setup-dev-processes.js'\nimport {frontAndBackendConfig} from './dev/processes/utils.js'\nimport {outputUpdateURLsResult, renderDev} from './dev/ui.js'\nimport {DevProcessFunction} from './dev/processes/types.js'\nimport {canEnablePreviewMode} from './extensions/common.js'\nimport {loadApp} from '../models/app/loader.js'\nimport {Web, isCurrentAppSchema, getAppScopesArray, AppInterface} from '../models/app/app.js'\nimport {getAppIdentifiers} from '../models/app/identifiers.js'\nimport {OrganizationApp} from '../models/organization.js'\nimport {AbortController} from '@shopify/cli-kit/node/abort'\nimport {ensureAuthenticatedPartners} from '@shopify/cli-kit/node/session'\nimport {getAvailableTCPPort} from '@shopify/cli-kit/node/tcp'\nimport {TunnelClient} from '@shopify/cli-kit/node/plugins/tunnel'\nimport {getBackendPort} from '@shopify/cli-kit/node/environment'\nimport {basename} from '@shopify/cli-kit/node/path'\nimport {renderWarning} from '@shopify/cli-kit/node/ui'\nimport {reportAnalyticsEvent} from '@shopify/cli-kit/node/analytics'\nimport {OutputProcess, formatPackageManagerCommand} from '@shopify/cli-kit/node/output'\n\nexport async function dev(commandOptions: DevOptions) {\n  renderWarning({body: 'Running in new dev mode! Pass SHOPIFY_CLI_NEW_DEV=0 to run in old mode.'})\n  const config = await prepareForDev(commandOptions)\n  await actionsBeforeSettingUpDevProcesses(config)\n  const {processes, previewUrl} = await setupDevProcesses(config)\n  await actionsBeforeLaunchingDevProcesses(config)\n  await launchDevProcesses({processes, previewUrl, config})\n}\n\nasync function prepareForDev(commandOptions: DevOptions): Promise<DevConfig> {\n  // Be optimistic about tunnel creation and do it as early as possible\n  const tunnelPort = await getAvailableTCPPort()\n  let tunnelClient: TunnelClient | undefined\n  if (!commandOptions.tunnelUrl && !commandOptions.noTunnel) {\n    tunnelClient = await startTunnelPlugin(commandOptions.commandConfig, tunnelPort, 'cloudflare')\n  }\n\n  const token = await ensureAuthenticatedPartners()\n  const {\n    storeFqdn,\n    remoteApp,\n    remoteAppUpdated,\n    updateURLs: cachedUpdateURLs,\n    configName,\n  } = await ensureDevContext(commandOptions, token)\n\n  const apiKey = remoteApp.apiKey\n  const specifications = await fetchSpecifications({token, apiKey, config: commandOptions.commandConfig})\n  let localApp = await loadApp({directory: commandOptions.directory, specifications, configName})\n\n  if (!commandOptions.skipDependenciesInstallation && !localApp.usesWorkspaces) {\n    localApp = await installAppDependencies(localApp)\n  }\n\n  const {webs, ...network} = await setupNetworkingOptions(\n    localApp.webs,\n    apiKey,\n    token,\n    {\n      noTunnel: commandOptions.noTunnel,\n      commandConfig: commandOptions.commandConfig,\n      tunnelUrl: commandOptions.tunnelUrl,\n    },\n    tunnelClient,\n  )\n  localApp.webs = webs\n\n  const partnerUrlsUpdated = await handleUpdatingOfPartnerUrls(\n    webs,\n    commandOptions.update,\n    network,\n    localApp,\n    cachedUpdateURLs,\n    remoteApp,\n    apiKey,\n    token,\n  )\n\n  // If we have a real UUID for an extension, use that instead of a random one\n  const allExtensionsWithDevUUIDs = getDevUUIDsForAllExtensions(localApp, apiKey)\n  localApp.allExtensions = allExtensionsWithDevUUIDs\n\n  return {\n    storeFqdn,\n    remoteApp,\n    remoteAppUpdated,\n    localApp,\n    token,\n    commandOptions,\n    network,\n    partnerUrlsUpdated,\n    usesUnifiedDeployment: remoteApp?.betas?.unifiedAppDeployment ?? false,\n  }\n}\n\nasync function actionsBeforeSettingUpDevProcesses({localApp, remoteApp}: DevConfig) {\n  if (\n    isCurrentAppSchema(localApp.configuration) &&\n    !localApp.configuration.access_scopes?.use_legacy_install_flow &&\n    getAppScopesArray(localApp.configuration).sort().join(',') !== remoteApp.requestedAccessScopes?.sort().join(',')\n  ) {\n    const nextSteps = [\n      [\n        'Run',\n        {command: formatPackageManagerCommand(localApp.packageManager, 'shopify app config push')},\n        'to push your scopes to the Partner Dashboard',\n      ],\n    ]\n\n    renderWarning({\n      headline: [`The scopes in your TOML don't match the scopes in your Partner Dashboard`],\n      body: [\n        `Scopes in ${basename(localApp.configuration.path)}:`,\n        scopesMessage(getAppScopesArray(localApp.configuration)),\n        '\\n',\n        'Scopes in Partner Dashboard:',\n        scopesMessage(remoteApp.requestedAccessScopes || []),\n      ],\n      nextSteps,\n    })\n  }\n}\n\nasync function actionsBeforeLaunchingDevProcesses(config: DevConfig) {\n  setPreviousAppId(config.commandOptions.directory, config.remoteApp.apiKey)\n\n  await logMetadataForDev({\n    devOptions: config.commandOptions,\n    tunnelUrl: config.network.proxyUrl,\n    shouldUpdateURLs: config.partnerUrlsUpdated,\n    storeFqdn: config.storeFqdn,\n    deploymentMode: config.usesUnifiedDeployment ? 'unified' : 'legacy',\n  })\n\n  await reportAnalyticsEvent({config: config.commandOptions.commandConfig})\n}\n\nfunction getDevUUIDsForAllExtensions(localApp: AppInterface, apiKey: string) {\n  const prodEnvIdentifiers = getAppIdentifiers({app: localApp})\n  const envExtensionsIds = prodEnvIdentifiers.extensions || {}\n  const extensionsIds = prodEnvIdentifiers.app === apiKey ? envExtensionsIds : {}\n\n  return localApp.allExtensions.map((ext) => {\n    ext.devUUID = extensionsIds[ext.localIdentifier] ?? ext.devUUID\n    return ext\n  })\n}\n\nasync function handleUpdatingOfPartnerUrls(\n  webs: Web[],\n  commandSpecifiedToUpdate: boolean,\n  network: {\n    proxyUrl: string\n    currentUrls: PartnersURLs\n  },\n  localApp: AppInterface,\n  cachedUpdateURLs: boolean | undefined,\n  remoteApp: Omit<OrganizationApp, 'apiSecretKeys'> & {apiSecret?: string | undefined},\n  apiKey: string,\n  token: string,\n) {\n  const {backendConfig, frontendConfig} = frontAndBackendConfig(webs)\n  let shouldUpdateURLs = false\n  if (frontendConfig || backendConfig) {\n    if (commandSpecifiedToUpdate) {\n      const newURLs = generatePartnersURLs(\n        network.proxyUrl,\n        webs.map(({configuration}) => configuration.auth_callback_path).find((path) => path),\n        isCurrentAppSchema(localApp.configuration) ? localApp.configuration.app_proxy : undefined,\n      )\n      shouldUpdateURLs = await shouldOrPromptUpdateURLs({\n        currentURLs: network.currentUrls,\n        appDirectory: localApp.directory,\n        cachedUpdateURLs,\n        newApp: remoteApp.newApp,\n        localApp,\n        apiKey,\n      })\n      if (shouldUpdateURLs) await updateURLs(newURLs, apiKey, token, localApp)\n      await outputUpdateURLsResult(shouldUpdateURLs, newURLs, remoteApp, localApp)\n    }\n  }\n  return shouldUpdateURLs\n}\n\nasync function setupNetworkingOptions(\n  webs: Web[],\n  apiKey: string,\n  token: string,\n  frontEndOptions: Pick<FrontendURLOptions, 'noTunnel' | 'tunnelUrl' | 'commandConfig'>,\n  tunnelClient?: TunnelClient,\n) {\n  const {backendConfig, frontendConfig} = frontAndBackendConfig(webs)\n\n  await validateCustomPorts(webs)\n\n  // generateFrontendURL still uses the old naming of frontendUrl and frontendPort,\n  // we can rename them to proxyUrl and proxyPort when we delete dev.ts\n  const [{frontendUrl, frontendPort: proxyPort, usingLocalhost}, backendPort, currentUrls] = await Promise.all([\n    generateFrontendURL({\n      ...frontEndOptions,\n      tunnelClient,\n    }),\n    getBackendPort() || backendConfig?.configuration.port || getAvailableTCPPort(),\n    getURLs(apiKey, token),\n  ])\n  const proxyUrl = usingLocalhost ? `${frontendUrl}:${proxyPort}` : frontendUrl\n\n  let frontendPort = frontendConfig?.configuration.port\n  if (frontendConfig) {\n    if (!frontendPort) {\n      frontendPort = frontendConfig === backendConfig ? backendPort : await getAvailableTCPPort()\n    }\n    frontendConfig.configuration.port = frontendPort\n  }\n  frontendPort = frontendPort ?? (await getAvailableTCPPort())\n\n  return {\n    proxyUrl,\n    proxyPort,\n    frontendPort,\n    backendPort,\n    currentUrls,\n    webs,\n  }\n}\n\nasync function launchDevProcesses({\n  processes,\n  previewUrl,\n  config,\n}: {\n  processes: DevProcesses\n  previewUrl: string\n  config: DevConfig\n}) {\n  const abortController = new AbortController()\n  const processesForTaskRunner: OutputProcess[] = processes.map((process) => {\n    const outputProcess: OutputProcess = {\n      prefix: process.prefix,\n      action: async (stdout, stderr, signal) => {\n        const fn = process.function as DevProcessFunction<typeof process.options>\n        return fn({stdout, stderr, abortSignal: signal}, process.options)\n      },\n    }\n    return outputProcess\n  })\n\n  const app = {\n    canEnablePreviewMode: canEnablePreviewMode(config.remoteApp, config.localApp),\n    developmentStorePreviewEnabled: config.remoteApp.developmentStorePreviewEnabled,\n    apiKey: config.remoteApp.apiKey,\n    token: config.token,\n  }\n\n  return renderDev({\n    processes: processesForTaskRunner,\n    previewUrl,\n    app,\n    abortController,\n  })\n}\n"]}