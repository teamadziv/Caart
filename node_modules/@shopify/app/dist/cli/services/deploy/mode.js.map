{"version":3,"file":"mode.js","sourceRoot":"","sources":["../../../../src/cli/services/deploy/mode.ts"],"names":[],"mappings":"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","sourcesContent":["import {OrganizationApp} from '../../models/organization.js'\nimport {DeployContextOptions} from '../context.js'\nimport {SetBetaFlagQuery, SetBetaFlagSchema, SetBetaFlagVariables} from '../../api/graphql/set_beta_flag.js'\nimport metadata from '../../metadata.js'\nimport {PackageManager} from '@shopify/cli-kit/node/node-package-manager'\nimport {formatPackageManagerCommand, outputCompleted, outputNewline} from '@shopify/cli-kit/node/output'\nimport {InfoMessage, renderConfirmationPrompt, renderInfo, renderTasks, renderWarning} from '@shopify/cli-kit/node/ui'\nimport figures from '@shopify/cli-kit/node/figures'\nimport {partnersRequest} from '@shopify/cli-kit/node/api/partners'\nimport {BugError} from '@shopify/cli-kit/node/error'\n\nexport type DeploymentMode = 'legacy' | 'unified' | 'unified-skip-release'\n\nexport async function resolveDeploymentMode(app: OrganizationApp, options: DeployContextOptions, token: string) {\n  let deploymentMode: DeploymentMode = app.betas?.unifiedAppDeployment ? 'unified' : 'legacy'\n\n  if (deploymentMode === 'legacy') {\n    const isUpgraded = await upgradeDeploymentToUnified(app, options, token)\n    // eslint-disable-next-line require-atomic-updates\n    deploymentMode = isUpgraded ? 'unified' : 'legacy'\n  }\n\n  if (deploymentMode === 'unified') {\n    if (options.noRelease) {\n      deploymentMode = 'unified-skip-release'\n    } else {\n      displayDeployUnifiedBanner(options.app.packageManager)\n    }\n  }\n\n  await metadata.addPublicMetadata(() => ({\n    cmd_app_deployment_mode: deploymentMode,\n  }))\n  return deploymentMode\n}\n\nfunction displayDeployUnifiedBanner(packageManager: PackageManager) {\n  renderWarning({\n    headline: [{command: formatPackageManagerCommand(packageManager, 'deploy')}, 'now releases changes to users.'],\n    body: ['All your extensions will be released to users, unless you add the `--no-release` flag.'],\n    reference: [\n      {\n        link: {\n          label: 'Simplified extension deployment',\n          url: 'https://shopify.dev/docs/apps/deployment/simplified-deployment',\n        },\n      },\n    ],\n  })\n}\n\nfunction displayDeployLegacyBanner(packageManager: PackageManager) {\n  renderInfo({\n    headline: 'Simplified deployment available now!',\n    body: [\n      'When you upgrade this app to use simplified deployment,',\n      {command: formatPackageManagerCommand(packageManager, 'deploy')},\n      'will:\\n',\n      {\n        list: {\n          items: [\n            'Bundle all your extensions into an app version',\n            'Release all your extensions to users straight from the CLI\\n',\n          ],\n        },\n      },\n      'All apps will be automatically upgraded in',\n      {bold: 'September 2023.'},\n    ],\n    reference: [\n      {\n        link: {\n          label: 'Simplified extension deployment',\n          url: 'https://shopify.dev/docs/apps/deployment/simplified-deployment',\n        },\n      },\n    ],\n  })\n}\n\nasync function upgradeDeploymentToUnified(app: OrganizationApp, options: DeployContextOptions, token: string) {\n  let response: 'skipped' | 'confirmed' | 'cancelled' = 'skipped'\n\n  if (options.force) {\n    await metadata.addPublicMetadata(() => ({\n      cmd_deploy_prompt_upgrade_to_unified_displayed: false,\n      cmd_deploy_prompt_upgrade_to_unified_response: response,\n    }))\n    return false\n  }\n\n  displayDeployLegacyBanner(options.app.packageManager)\n\n  const infoMessage: InfoMessage = {\n    title: {\n      color: 'red',\n      text: `${figures.warning} This can't be undone.`,\n    },\n    body: \"Once you upgrade this app, you can't go back to the old way of deploying extensions\",\n  }\n  const shouldUpgrade = await renderConfirmationPrompt({\n    message: `Upgrade ${app.title} to use simplified deployment?`,\n    confirmationMessage: `Yes, upgrade this app`,\n    cancellationMessage: \"No, don't upgrade\",\n    defaultValue: false,\n    infoMessage,\n  })\n\n  response = shouldUpgrade ? 'confirmed' : 'cancelled'\n  await metadata.addPublicMetadata(() => ({\n    cmd_deploy_prompt_upgrade_to_unified_displayed: true,\n    cmd_deploy_prompt_upgrade_to_unified_response: response,\n  }))\n\n  if (!shouldUpgrade) {\n    return false\n  }\n\n  const tasks = [\n    {\n      title: 'Upgrading app...',\n      task: async () => {\n        const query = SetBetaFlagQuery\n        const variables: SetBetaFlagVariables = {\n          input: {\n            apiKey: app.apiKey,\n            betaName: 'app_unified_deployment',\n            enabled: true,\n          },\n        }\n        const result: SetBetaFlagSchema = await partnersRequest(query, token, variables)\n        if (result.setBetaFlag.userErrors?.length > 0) {\n          const errors = result.setBetaFlag.userErrors.map((error) => error.message).join(', ')\n          throw new BugError(`Error upgrading the app ${app.title} to use simplified deployment: ${errors}`)\n        }\n      },\n    },\n  ]\n  await renderTasks(tasks)\n  outputCompleted('Upgrade complete')\n  outputNewline()\n  return true\n}\n"]}