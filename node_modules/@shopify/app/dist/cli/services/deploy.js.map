{"version":3,"file":"deploy.js","sourceRoot":"","sources":["../../../src/cli/services/deploy.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable require-atomic-updates */\nimport {\n  uploadFunctionExtensions,\n  uploadThemeExtensions,\n  uploadExtensionsBundle,\n  UploadExtensionsBundleOutput,\n} from './deploy/upload.js'\n\nimport {ensureDeployContext} from './context.js'\nimport {bundleAndBuildExtensions} from './deploy/bundle.js'\nimport {fetchAppExtensionRegistrations} from './dev/fetch.js'\nimport {DeploymentMode} from './deploy/mode.js'\nimport {AppInterface} from '../models/app/app.js'\nimport {Identifiers, updateAppIdentifiers} from '../models/app/identifiers.js'\nimport {OrganizationApp} from '../models/organization.js'\nimport {AllAppExtensionRegistrationsQuerySchema} from '../api/graphql/all_app_extension_registrations.js'\nimport {ExtensionInstance} from '../models/extensions/extension-instance.js'\nimport {FunctionConfigType} from '../models/extensions/specifications/function.js'\nimport {renderInfo, renderSuccess, renderTasks} from '@shopify/cli-kit/node/ui'\nimport {inTemporaryDirectory, mkdir} from '@shopify/cli-kit/node/fs'\nimport {joinPath, dirname} from '@shopify/cli-kit/node/path'\nimport {outputNewline, outputInfo, formatPackageManagerCommand} from '@shopify/cli-kit/node/output'\nimport {useThemebundling} from '@shopify/cli-kit/node/context/local'\nimport {getArrayRejectingUndefined} from '@shopify/cli-kit/common/array'\nimport {Config} from '@oclif/core'\nimport type {AlertCustomSection, Task} from '@shopify/cli-kit/node/ui'\n\ninterface DeployOptions {\n  /** The app to be built and uploaded */\n  app: AppInterface\n\n  /** API key of the app in Partners admin */\n  apiKey?: string\n\n  /** If true, ignore any cached appId or extensionId */\n  reset: boolean\n\n  /** If true, proceed with deploy without asking for confirmation */\n  force: boolean\n\n  /** If true, deploy app without releasing it to the users */\n  noRelease: boolean\n\n  /** App version message */\n  message?: string\n\n  /** App version identifier */\n  version?: string\n\n  /** The git reference url of the app version */\n  commitReference?: string\n\n  /** The config from the Oclif command */\n  commandConfig: Config\n}\n\ninterface TasksContext {\n  bundlePath?: string\n  bundle?: boolean\n}\n\nexport async function deploy(options: DeployOptions) {\n  // eslint-disable-next-line prefer-const\n  let {app, identifiers, partnersApp, token, deploymentMode} = await ensureDeployContext(options)\n  const apiKey = identifiers.app\n  const unifiedDeployment = deploymentMode !== 'legacy'\n\n  if (!options.app.hasExtensions() && !unifiedDeployment) {\n    renderInfo({headline: 'No extensions to deploy to Shopify Partners yet.'})\n    return\n  }\n\n  outputNewline()\n  switch (deploymentMode) {\n    case 'legacy':\n      outputInfo(`Deploying your work to Shopify Partners.`)\n      break\n    case 'unified':\n      outputInfo(`Releasing a new app version as part of ${partnersApp.title}`)\n      break\n    case 'unified-skip-release':\n      outputInfo(`Creating a new app version as part of ${partnersApp.title}`)\n      break\n  }\n\n  outputNewline()\n\n  let registrations: AllAppExtensionRegistrationsQuerySchema\n  let uploadExtensionsBundleResult: UploadExtensionsBundleOutput\n\n  await inTemporaryDirectory(async (tmpDir) => {\n    try {\n      const bundle = app.allExtensions.some((ext) => ext.features.includes('bundling'))\n      let bundlePath: string | undefined\n\n      if (bundle) {\n        bundlePath = joinPath(tmpDir, `bundle.zip`)\n        await mkdir(dirname(bundlePath))\n      }\n      await bundleAndBuildExtensions({app, bundlePath, identifiers})\n\n      const uploadTaskTitle = (() => {\n        switch (deploymentMode) {\n          case 'legacy':\n            return 'Pushing your code to Shopify'\n          case 'unified':\n            return 'Releasing an app version'\n          case 'unified-skip-release':\n            return 'Creating an app version'\n        }\n      })()\n\n      const tasks: Task<TasksContext>[] = [\n        {\n          title: 'Running validation',\n          task: async () => {\n            await Promise.all([app.allExtensions.map((ext) => ext.preDeployValidation())])\n          },\n        },\n        {\n          title: uploadTaskTitle,\n          task: async () => {\n            const appModules = await Promise.all(\n              options.app.allExtensions.flatMap((ext) =>\n                ext.bundleConfig({identifiers, token, apiKey, unifiedDeployment}),\n              ),\n            )\n\n            if (bundle || unifiedDeployment) {\n              uploadExtensionsBundleResult = await uploadExtensionsBundle({\n                apiKey,\n                bundlePath,\n                appModules: getArrayRejectingUndefined(appModules),\n                deploymentMode,\n                token,\n                extensionIds: identifiers.extensionIds,\n                message: options.message,\n                version: options.version,\n                commitReference: options.commitReference,\n              })\n            }\n\n            if (!useThemebundling()) {\n              const themeExtensions = options.app.allExtensions.filter((ext) => ext.isThemeExtension)\n              await uploadThemeExtensions(themeExtensions, {apiKey, identifiers, token})\n            }\n\n            if (!unifiedDeployment) {\n              const functions = options.app.allExtensions.filter(\n                (ext) => ext.isFunctionExtension,\n              ) as ExtensionInstance<FunctionConfigType>[]\n              identifiers = await uploadFunctionExtensions(functions, {\n                identifiers,\n                token,\n              })\n            }\n\n            app = await updateAppIdentifiers({app, identifiers, command: 'deploy'})\n            registrations = await fetchAppExtensionRegistrations({token, apiKey: identifiers.app})\n          },\n        },\n      ]\n\n      await renderTasks(tasks)\n\n      await outputCompletionMessage({\n        app,\n        partnersApp,\n        partnersOrganizationId: partnersApp.organizationId,\n        identifiers,\n        registrations,\n        deploymentMode,\n        uploadExtensionsBundleResult,\n      })\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (error: any) {\n      /**\n       * If deployment fails when uploading we want the identifiers to be persisted\n       * for the next run.\n       */\n      await updateAppIdentifiers({app, identifiers, command: 'deploy'})\n      throw error\n    }\n  })\n}\n\nasync function outputCompletionMessage({\n  app,\n  partnersApp,\n  partnersOrganizationId,\n  identifiers,\n  registrations,\n  deploymentMode,\n  uploadExtensionsBundleResult,\n}: {\n  app: AppInterface\n  partnersApp: Omit<OrganizationApp, 'apiSecretKeys' | 'apiKey'>\n  partnersOrganizationId: string\n  identifiers: Identifiers\n  registrations: AllAppExtensionRegistrationsQuerySchema\n  deploymentMode: DeploymentMode\n  uploadExtensionsBundleResult: UploadExtensionsBundleOutput\n}) {\n  if (deploymentMode !== 'legacy') {\n    return outputUnifiedCompletionMessage(deploymentMode, uploadExtensionsBundleResult, app)\n  }\n\n  let headline: string\n\n  const validationErrors = uploadExtensionsBundleResult?.validationErrors ?? []\n  if (validationErrors.length > 0) {\n    headline = 'Deployed to Shopify, but fixes are needed.'\n  } else {\n    headline = 'Deployed to Shopify!'\n  }\n\n  const outputDeployedButNotLiveMessage = (extension: ExtensionInstance) => {\n    const result = [`${extension.localIdentifier} is deployed to Shopify but not yet live`]\n    const uuid = identifiers.extensions[extension.localIdentifier]\n    const validationError = validationErrors.find((error) => error.uuid === uuid)\n\n    if (validationError) {\n      result.push('\\n- Validation errors found in your extension toml file')\n      validationError.errors.forEach((err) => {\n        result.push(`\\n  └ ${err.message}`)\n      })\n    }\n\n    return result\n  }\n\n  const outputDeployedAndLiveMessage = (extension: ExtensionInstance) => {\n    return `${extension.localIdentifier} is live`\n  }\n\n  const outputNextStep = async (extension: ExtensionInstance) => {\n    const extensionId =\n      registrations.app.extensionRegistrations.find((registration) => {\n        return registration.uuid === identifiers.extensions[extension.localIdentifier]\n      })?.id ?? ''\n    return [\n      'Publish',\n      {\n        link: {\n          url: await extension.publishURL({orgId: partnersOrganizationId, appId: partnersApp.id, extensionId}),\n          label: extension.localIdentifier,\n        },\n      },\n    ]\n  }\n\n  const nonFunctionExtensions = app.allExtensions.filter((ext) => !ext.isFunctionExtension)\n  const functionExtensions = app.allExtensions.filter((ext) => ext.isFunctionExtension)\n\n  const customSections: AlertCustomSection[] = [\n    {\n      title: 'Summary',\n      body: {\n        list: {\n          items: [\n            ...nonFunctionExtensions.map(outputDeployedButNotLiveMessage),\n            ...functionExtensions.map(outputDeployedAndLiveMessage),\n          ],\n        },\n      },\n    },\n  ]\n\n  if (nonFunctionExtensions.length > 0) {\n    customSections.push({\n      title: 'Next steps',\n      body: {\n        list: {\n          items: await Promise.all(nonFunctionExtensions.map(outputNextStep)),\n        },\n      },\n    })\n  }\n\n  renderSuccess({\n    headline,\n    customSections,\n  })\n}\n\nasync function outputUnifiedCompletionMessage(\n  deploymentMode: DeploymentMode,\n  uploadExtensionsBundleResult: UploadExtensionsBundleOutput,\n  app: AppInterface,\n) {\n  const linkAndMessage = [\n    {link: {label: uploadExtensionsBundleResult.versionTag, url: uploadExtensionsBundleResult.location}},\n    uploadExtensionsBundleResult.message ? `\\n${uploadExtensionsBundleResult.message}` : '',\n  ]\n  if (deploymentMode === 'unified') {\n    return uploadExtensionsBundleResult.deployError\n      ? renderInfo({\n          headline: 'New version created, but not released.',\n          body: [...linkAndMessage, `\\n\\n${uploadExtensionsBundleResult.deployError}`],\n        })\n      : renderSuccess({\n          headline: 'New version released to users.',\n          body: linkAndMessage,\n        })\n  }\n\n  return renderSuccess({\n    headline: 'New version created.',\n    body: linkAndMessage,\n    nextSteps: [\n      [\n        'Run',\n        {\n          command: formatPackageManagerCommand(\n            app.packageManager,\n            'shopify app release',\n            `--version=${uploadExtensionsBundleResult.versionTag}`,\n          ),\n        },\n        'to release this version to users.',\n      ],\n    ],\n  })\n}\n"]}