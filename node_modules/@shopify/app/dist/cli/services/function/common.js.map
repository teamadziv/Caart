{"version":3,"file":"common.js","sourceRoot":"","sources":["../../../../src/cli/services/function/common.ts"],"names":[],"mappings":"AAEA,OAAO,EAAC,IAAI,IAAI,OAAO,EAAC,MAAM,4BAA4B,CAAA;AAC1D,OAAO,EAAC,4BAA4B,EAAC,MAAM,2CAA2C,CAAA;AACtF,OAAO,EAAC,WAAW,EAAE,GAAG,EAAC,MAAM,4BAA4B,CAAA;AAC3D,OAAO,EAAC,gBAAgB,EAAC,MAAM,0BAA0B,CAAA;AACzD,OAAO,EAAC,UAAU,EAAC,MAAM,6BAA6B,CAAA;AACtD,OAAO,EAAS,KAAK,EAAC,MAAM,aAAa,CAAA;AAEzC,MAAM,CAAC,MAAM,aAAa,GAAG;IAC3B,IAAI,EAAE,KAAK,CAAC,MAAM,CAAC;QACjB,MAAM,EAAE,KAAK;QACb,WAAW,EAAE,sCAAsC;QACnD,KAAK,EAAE,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QACxD,GAAG,EAAE,mBAAmB;KACzB,CAAC;CACH,CAAA;AAED,MAAM,CAAC,KAAK,UAAU,iBAAiB,CACrC,MAAc,EACd,IAAwB,EACxB,QAAqE;IAErE,MAAM,SAAS,GAAG,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAA;IAElD,MAAM,cAAc,GAAG,MAAM,4BAA4B,CAAC,MAAM,CAAC,CAAA;IACjE,MAAM,GAAG,GAAiB,MAAM,OAAO,CAAC,EAAC,SAAS,EAAE,cAAc,EAAC,CAAC,CAAA;IAEpE,MAAM,WAAW,GAAG,GAAG,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,SAAS,KAAK,SAAS,CAAC,CAAA;IACtF,IAAI,WAAW,EAAE;QACf,OAAO,QAAQ,CAAC,GAAG,EAAE,WAAW,CAAC,CAAA;KAClC;SAAM;QACL,gBAAgB,CACd,IAAI,UAAU,CAAC,6FAA6F,CAAC,CAC9G,CAAA;KACF;AACH,CAAC","sourcesContent":["import {FunctionExtension} from '../../models/app/extensions.js'\nimport {App, AppInterface} from '../../models/app/app.js'\nimport {load as loadApp} from '../../models/app/loader.js'\nimport {loadExtensionsSpecifications} from '../../models/extensions/specifications.js'\nimport {resolvePath, cwd} from '@shopify/cli-kit/node/path'\nimport {renderFatalError} from '@shopify/cli-kit/node/ui'\nimport {AbortError} from '@shopify/cli-kit/node/error'\nimport {Config, Flags} from '@oclif/core'\n\nexport const functionFlags = {\n  path: Flags.string({\n    hidden: false,\n    description: 'The path to your function directory.',\n    parse: (input, _) => Promise.resolve(resolvePath(input)),\n    env: 'SHOPIFY_FLAG_PATH',\n  }),\n}\n\nexport async function inFunctionContext(\n  config: Config,\n  path: string | undefined,\n  callback: (app: App, ourFunction: FunctionExtension) => Promise<void>,\n) {\n  const directory = path ? resolvePath(path) : cwd()\n\n  const specifications = await loadExtensionsSpecifications(config)\n  const app: AppInterface = await loadApp({directory, specifications})\n\n  const ourFunction = app.extensions.function.find((fun) => fun.directory === directory)\n  if (ourFunction) {\n    return callback(app, ourFunction)\n  } else {\n    renderFatalError(\n      new AbortError('Run this command from a function directory or use `--path` to specify a function directory.'),\n    )\n  }\n}\n"]}