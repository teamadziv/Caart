{"version":3,"file":"trigger.js","sourceRoot":"","sources":["../../../../src/cli/services/webhook/trigger.ts"],"names":[],"mappings":"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","sourcesContent":["import {DELIVERY_METHOD} from './trigger-options.js'\nimport {getWebhookSample, UserErrors} from './request-sample.js'\nimport {triggerLocalWebhook} from './trigger-local-webhook.js'\nimport {requestApiVersions} from './request-api-versions.js'\nimport {requestTopics} from './request-topics.js'\nimport {AppCredentials, findInEnv, findApiKey, requestAppInfo} from './find-app-info.js'\nimport {\n  collectAddressAndMethod,\n  collectApiVersion,\n  collectSecret,\n  collectTopic,\n  WebhookTriggerFlags,\n} from '../../prompts/webhook/options-prompt.js'\nimport {ensureAuthenticatedPartners} from '@shopify/cli-kit/node/session'\nimport {consoleError, outputInfo, outputSuccess} from '@shopify/cli-kit/node/output'\nimport {renderConfirmationPrompt} from '@shopify/cli-kit/node/ui'\n\n/**\n * Orchestrates the command request by requesting the sample and sending it to localhost if required.\n * It outputs the result in console\n *\n * @param flags - Passed flags\n */\nexport async function webhookTriggerService(flags: WebhookTriggerFlags) {\n  const token = await ensureAuthenticatedPartners()\n\n  const apiVersion = await collectApiVersion(flags.apiVersion, await requestApiVersions(token))\n  const topic = await collectTopic(flags.topic, apiVersion, await requestTopics(token, apiVersion))\n\n  const [deliveryMethod, address] = await collectAddressAndMethod(flags.deliveryMethod, flags.address)\n\n  const credentials = await getSecret(token, flags.clientSecret)\n  const secret = credentials.clientSecret as string\n\n  const sample = await getWebhookSample(token, topic, apiVersion, deliveryMethod, address, secret)\n\n  if (!sample.success) {\n    consoleError(`Request errors:\\n${formatErrors(sample.userErrors)}`)\n    return\n  }\n\n  if (deliveryMethod === DELIVERY_METHOD.LOCALHOST) {\n    const result = await triggerLocalWebhook(address, sample.samplePayload, sample.headers)\n\n    if (result) {\n      outputSuccess('Localhost delivery sucessful')\n      return\n    }\n\n    consoleError('Localhost delivery failed')\n    return\n  }\n\n  if (sample.samplePayload === JSON.stringify({})) {\n    outputSuccess('Webhook has been enqueued for delivery')\n  }\n}\n\nfunction formatErrors(errors: UserErrors[]): string {\n  try {\n    return errors\n      .map((element) =>\n        JSON.parse(element.message)\n          .map((msg: string) => `  Â· ${msg}`)\n          .join('\\n'),\n      )\n      .join('\\n')\n    // eslint-disable-next-line no-catch-all/no-catch-all\n  } catch (err) {\n    return JSON.stringify(errors)\n  }\n}\n\nasync function getSecret(token: string, clientSecretFlag: string | undefined): Promise<AppCredentials> {\n  if (valueSet(clientSecretFlag)) {\n    // Flag overwrites any other secret\n    const credentials: AppCredentials = {clientSecret: clientSecretFlag}\n    return credentials\n  }\n\n  const automatic = await renderConfirmationPrompt({\n    message: `Should we automatically populate the client-secret for you using app settings?`,\n    confirmationMessage: `Yes, try to get it from the configuration`,\n    cancellationMessage: \"No, I'll type it myself\",\n  })\n\n  if (!automatic) {\n    const credentials: AppCredentials = {}\n    credentials.clientSecret = await collectSecret(clientSecretFlag)\n    return credentials\n  }\n\n  const localCredentials = await findInEnv()\n  if (valueSet(localCredentials.clientSecret)) {\n    outputInfo('Reading client-secret from .env file')\n    return localCredentials\n  }\n\n  const apiKey = await findApiKey(token)\n  if (apiKey === undefined) {\n    localCredentials.clientSecret = await collectSecret(clientSecretFlag)\n    return localCredentials\n  }\n\n  const appCredentials = await requestAppInfo(token, apiKey)\n  if (valueSet(appCredentials.clientSecret)) {\n    outputInfo('Reading client-secret from app settings in Partners')\n  } else {\n    appCredentials.clientSecret = await collectSecret(clientSecretFlag)\n  }\n\n  return appCredentials\n}\n\nfunction valueSet(value: string | undefined): boolean {\n  if (value === undefined) {\n    return false\n  }\n\n  return value.length > 0\n}\n"]}