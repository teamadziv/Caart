{"version":3,"file":"trigger-options.js","sourceRoot":"","sources":["../../../../src/cli/services/webhook/trigger-options.ts"],"names":[],"mappings":"AAAA,MAAM,CAAC,MAAM,eAAe,GAAG;IAC7B,SAAS,EAAE,WAAW;IACtB,IAAI,EAAE,MAAM;IACZ,MAAM,EAAE,gBAAgB;IACxB,WAAW,EAAE,cAAc;CAC5B,CAAA;AAED,MAAM,QAAQ,GAAG;IACf,SAAS,EAAE,IAAI,MAAM,CAAC,QAAQ,EAAE,GAAG,CAAC;IACpC,IAAI,EAAE,IAAI,MAAM,CAAC,SAAS,EAAE,GAAG,CAAC;IAChC,MAAM,EAAE,IAAI,MAAM,CAAC,UAAU,CAAC;IAC9B,WAAW,EAAE,IAAI,MAAM,CAAC,kBAAkB,CAAC;CAC5C,CAAA;AAED;;;;;GAKG;AACH,MAAM,UAAU,wBAAwB,CAAC,OAAe;IACtD,IAAI,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;QACjC,OAAO,eAAe,CAAC,MAAM,CAAA;KAC9B;IAED,IAAI,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;QACtC,OAAO,eAAe,CAAC,WAAW,CAAA;KACnC;IAED,IAAI,SAAS,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE;QAC1C,OAAO,eAAe,CAAC,SAAS,CAAA;KACjC;IAED,IAAI,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;QAC/B,OAAO,eAAe,CAAC,IAAI,CAAA;KAC5B;IAED,OAAO,SAAS,CAAA;AAClB,CAAC;AAED;;;;;;GAMG;AACH,MAAM,UAAU,iCAAiC,CAAC,OAAe,EAAE,cAAsB;IACvF,IAAI,cAAc,KAAK,eAAe,CAAC,MAAM,EAAE;QAC7C,OAAO,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;KACrC;IAED,IAAI,cAAc,KAAK,eAAe,CAAC,WAAW,EAAE;QAClD,OAAO,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;KAC1C;IAED,IAAI,cAAc,KAAK,eAAe,CAAC,IAAI,IAAI,SAAS,CAAC,OAAO,CAAC,EAAE;QACjE,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE;YACpB,OAAO,IAAI,CAAA;SACZ;QACD,OAAO,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;KACnC;IAED,OAAO,KAAK,CAAA;AACd,CAAC;AAED,SAAS,OAAO,CAAC,OAAe;IAC9B,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,CAAA;IAC1C,OAAO,GAAG,CAAC,QAAQ,KAAK,WAAW,CAAA;AACrC,CAAC;AAED,SAAS,SAAS,CAAC,OAAe;IAChC,OAAO,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;AACxE,CAAC","sourcesContent":["export const DELIVERY_METHOD = {\n  LOCALHOST: 'localhost',\n  HTTP: 'http',\n  PUBSUB: 'google-pub-sub',\n  EVENTBRIDGE: 'event-bridge',\n}\n\nconst PROTOCOL = {\n  LOCALHOST: new RegExp('^http:', 'i'),\n  HTTP: new RegExp('^https:', 'i'),\n  PUBSUB: new RegExp('^pubsub:'),\n  EVENTBRIDGE: new RegExp('^arn:aws:events:'),\n}\n\n/**\n * Detect which delivery-method an address belongs to\n *\n * @param address - A target endpoint\n * @returns A DELIVERY_METHOD or undefined if none found\n */\nexport function deliveryMethodForAddress(address: string): string | undefined {\n  if (PROTOCOL.PUBSUB.test(address)) {\n    return DELIVERY_METHOD.PUBSUB\n  }\n\n  if (PROTOCOL.EVENTBRIDGE.test(address)) {\n    return DELIVERY_METHOD.EVENTBRIDGE\n  }\n\n  if (isAnyHttp(address) && isLocal(address)) {\n    return DELIVERY_METHOD.LOCALHOST\n  }\n\n  if (PROTOCOL.HTTP.test(address)) {\n    return DELIVERY_METHOD.HTTP\n  }\n\n  return undefined\n}\n\n/**\n * Checks whether an address and a delivery method are compatible\n *\n * @param address - A target endpoint\n * @param deliveryMethod - An existing delivery-method\n * @returns true if compatible (eg: pubsub://projectid/topicid and google-pub-sub), false otherwise\n */\nexport function isAddressAllowedForDeliveryMethod(address: string, deliveryMethod: string): boolean {\n  if (deliveryMethod === DELIVERY_METHOD.PUBSUB) {\n    return PROTOCOL.PUBSUB.test(address)\n  }\n\n  if (deliveryMethod === DELIVERY_METHOD.EVENTBRIDGE) {\n    return PROTOCOL.EVENTBRIDGE.test(address)\n  }\n\n  if (deliveryMethod === DELIVERY_METHOD.HTTP && isAnyHttp(address)) {\n    if (isLocal(address)) {\n      return true\n    }\n    return PROTOCOL.HTTP.test(address)\n  }\n\n  return false\n}\n\nfunction isLocal(address: string): boolean {\n  const url = new URL(address.toLowerCase())\n  return url.hostname === 'localhost'\n}\n\nfunction isAnyHttp(address: string): boolean {\n  return PROTOCOL.LOCALHOST.test(address) || PROTOCOL.HTTP.test(address)\n}\n"]}