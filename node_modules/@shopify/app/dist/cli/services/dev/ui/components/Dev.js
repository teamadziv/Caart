import { developerPreviewUpdate, disableDeveloperPreview, enableDeveloperPreview } from '../../../context.js';
import { fetchAppPreviewMode } from '../../fetch.js';
import { ConcurrentOutput } from '@shopify/cli-kit/node/ui/components';
import { useAbortSignal } from '@shopify/cli-kit/node/ui/hooks';
import React, { useEffect, useMemo, useRef, useState } from 'react';
import { Box, Text, useInput, useStdin } from 'ink';
import { handleCtrlC } from '@shopify/cli-kit/node/ui';
import { openURL } from '@shopify/cli-kit/node/system';
import figures from '@shopify/cli-kit/node/figures';
import { isUnitTest } from '@shopify/cli-kit/node/context/local';
import { treeKill } from '@shopify/cli-kit/node/tree-kill';
const Dev = ({ abortController, processes, previewUrl, app, pollingTime = 5000 }) => {
    const { apiKey, token, canEnablePreviewMode, developmentStorePreviewEnabled } = app;
    const { isRawModeSupported: canUseShortcuts } = useStdin();
    const pollingInterval = useRef();
    const [statusMessage, setStatusMessage] = useState(`Preview URL: ${previewUrl}`);
    const { isAborted } = useAbortSignal(abortController.signal, async (err) => {
        if (err) {
            setStatusMessage('Shutting down dev because of an error ...');
        }
        else {
            setStatusMessage('Shutting down dev ...');
            setTimeout(() => {
                if (isUnitTest())
                    return;
                treeKill(process.pid, 'SIGINT', false, () => {
                    process.exit(0);
                });
            }, 2000);
        }
        clearInterval(pollingInterval.current);
        await disableDeveloperPreview({ apiKey, token });
    });
    const [devPreviewEnabled, setDevPreviewEnabled] = useState(true);
    const [error, setError] = useState(undefined);
    const errorHandledProcesses = useMemo(() => {
        return processes.map((process) => {
            return {
                ...process,
                action: async (stdout, stderr, signal) => {
                    try {
                        return await process.action(stdout, stderr, signal);
                        // eslint-disable-next-line no-catch-all/no-catch-all
                    }
                    catch (error) {
                        abortController.abort(error);
                    }
                },
            };
        });
    }, [processes, abortController]);
    useEffect(() => {
        const pollDevPreviewMode = async () => {
            try {
                const enabled = await fetchAppPreviewMode(apiKey, token);
                setDevPreviewEnabled(enabled ?? false);
                setError('');
                // eslint-disable-next-line no-catch-all/no-catch-all
            }
            catch (_) {
                setError('Failed to fetch the latest status of the development store preview, trying again in 5 seconds.');
            }
        };
        const enablePreviewMode = async () => {
            // Enable dev preview on app dev start
            try {
                await enableDeveloperPreview({ apiKey, token });
                setError('');
                // eslint-disable-next-line no-catch-all/no-catch-all
            }
            catch (_) {
                setError('Failed to turn on development store preview automatically.\nTry turning it on manually by pressing `d`.');
                setDevPreviewEnabled(Boolean(developmentStorePreviewEnabled));
            }
        };
        if (canEnablePreviewMode) {
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            enablePreviewMode();
            const startPolling = () => {
                return setInterval(
                // eslint-disable-next-line @typescript-eslint/no-misused-promises
                () => pollDevPreviewMode(), pollingTime);
            };
            pollingInterval.current = startPolling();
        }
        return () => {
            clearInterval(pollingInterval.current);
        };
    }, [canEnablePreviewMode]);
    useInput((input, key) => {
        handleCtrlC(input, key, () => abortController.abort());
        const onInput = async () => {
            try {
                setError('');
                if (input === 'p' && previewUrl) {
                    await openURL(previewUrl);
                }
                else if (input === 'q') {
                    abortController.abort();
                }
                else if (input === 'd' && canEnablePreviewMode) {
                    const newDevPreviewEnabled = !devPreviewEnabled;
                    setDevPreviewEnabled(newDevPreviewEnabled);
                    try {
                        const developerPreviewUpdateSucceded = await developerPreviewUpdate({
                            apiKey,
                            token,
                            enabled: newDevPreviewEnabled,
                        });
                        if (!developerPreviewUpdateSucceded) {
                            throw new Error(`Failed to turn ${newDevPreviewEnabled ? 'on' : 'off'} development store preview.`);
                        }
                        // eslint-disable-next-line no-catch-all/no-catch-all
                    }
                    catch (_) {
                        setDevPreviewEnabled(devPreviewEnabled);
                        setError(`Failed to turn ${newDevPreviewEnabled ? 'on' : 'off'} development store preview.`);
                    }
                }
                // eslint-disable-next-line no-catch-all/no-catch-all
            }
            catch (_) {
                setError('Failed to handle your input.');
            }
        };
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        onInput();
    }, { isActive: canUseShortcuts });
    return (React.createElement(React.Fragment, null,
        React.createElement(ConcurrentOutput, { processes: errorHandledProcesses, abortSignal: abortController.signal, keepRunningAfterProcessesResolve: true }),
        !isAborted ? (React.createElement(Box, { marginY: 1, paddingTop: 1, flexDirection: "column", flexGrow: 1, borderStyle: "single", borderBottom: false, borderLeft: false, borderRight: false, borderTop: true },
            canUseShortcuts ? (React.createElement(Box, { flexDirection: "column" },
                canEnablePreviewMode ? (React.createElement(Text, null,
                    figures.pointerSmall,
                    " Press ",
                    React.createElement(Text, { bold: true }, "d"),
                    " ",
                    figures.lineVertical,
                    " toggle development store preview: ",
                    devPreviewEnabled ? React.createElement(Text, { color: "green" }, "\u2714 on") : React.createElement(Text, { color: "red" }, "\u2716 off"))) : null,
                React.createElement(Text, null,
                    figures.pointerSmall,
                    " Press ",
                    React.createElement(Text, { bold: true }, "p"),
                    " ",
                    figures.lineVertical,
                    " preview in your browser"),
                React.createElement(Text, null,
                    figures.pointerSmall,
                    " Press ",
                    React.createElement(Text, { bold: true }, "q"),
                    " ",
                    figures.lineVertical,
                    " quit"))) : null,
            React.createElement(Box, { marginTop: canUseShortcuts ? 1 : 0 },
                React.createElement(Text, null, statusMessage)),
            error ? React.createElement(Text, { color: "red" }, error) : null)) : null));
};
export { Dev };
//# sourceMappingURL=Dev.js.map