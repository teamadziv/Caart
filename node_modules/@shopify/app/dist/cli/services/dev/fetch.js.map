{"version":3,"file":"fetch.js","sourceRoot":"","sources":["../../../../src/cli/services/dev/fetch.ts"],"names":[],"mappings":"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","sourcesContent":["import {MinimalOrganizationApp, Organization, OrganizationApp, OrganizationStore} from '../../models/organization.js'\nimport {\n  AllAppExtensionRegistrationsQuery,\n  AllAppExtensionRegistrationsQuerySchema,\n} from '../../api/graphql/all_app_extension_registrations.js'\nimport {AllOrganizationsQuery, AllOrganizationsQuerySchema} from '../../api/graphql/all_orgs.js'\nimport {FindOrganizationQuery, FindOrganizationQuerySchema} from '../../api/graphql/find_org.js'\nimport {FindAppQuery, FindAppQuerySchema} from '../../api/graphql/find_app.js'\nimport {FindAppPreviewModeQuery, FindAppPreviewModeQuerySchema} from '../../api/graphql/find_app_preview_mode.js'\nimport {FindOrganizationBasicQuery, FindOrganizationBasicQuerySchema} from '../../api/graphql/find_org_basic.js'\nimport {\n  AllDevStoresByOrganizationQuery,\n  AllDevStoresByOrganizationSchema,\n} from '../../api/graphql/all_dev_stores_by_org.js'\nimport {FindStoreByDomainQuery, FindStoreByDomainSchema} from '../../api/graphql/find_store_by_domain.js'\nimport {ActiveAppVersionQuery, ActiveAppVersionQuerySchema} from '../../api/graphql/app_active_version.js'\nimport {partnersRequest} from '@shopify/cli-kit/node/api/partners'\nimport {AbortError} from '@shopify/cli-kit/node/error'\n\nexport class NoOrgError extends AbortError {\n  constructor(organizationId?: string) {\n    const nextSteps = [\n      [\n        'Have you',\n        {\n          link: {\n            label: 'created a Shopify Partners organization',\n            url: 'https://partners.shopify.com/signup',\n          },\n        },\n        {\n          char: '?',\n        },\n      ],\n      'Have you confirmed your accounts from the emails you received?',\n      [\n        'Need to connect to a different App or organization? Run the command again with',\n        {\n          command: '--reset',\n        },\n      ],\n    ]\n\n    if (organizationId) {\n      nextSteps.push([\n        'Do you have access to the right Shopify Partners organization? The CLI is loading',\n        {link: {label: 'this organization', url: `https://partner.shopify.com/${organizationId}`}},\n      ])\n    }\n\n    super(`No Organization found`, undefined, nextSteps)\n  }\n}\n\nexport interface OrganizationAppsResponse {\n  pageInfo: {\n    hasNextPage: boolean\n  }\n  nodes: MinimalOrganizationApp[]\n}\n\nexport interface FetchResponse {\n  organization: Organization\n  apps: OrganizationAppsResponse\n  stores: OrganizationStore[]\n}\n\nexport async function fetchAppExtensionRegistrations({\n  token,\n  apiKey,\n}: {\n  token: string\n  apiKey: string\n}): Promise<AllAppExtensionRegistrationsQuerySchema> {\n  const query = AllAppExtensionRegistrationsQuery\n  const result: AllAppExtensionRegistrationsQuerySchema = await partnersRequest(query, token, {\n    apiKey,\n  })\n  return result\n}\n\nexport async function fetchActiveAppVersion({\n  token,\n  apiKey,\n}: {\n  token: string\n  apiKey: string\n}): Promise<ActiveAppVersionQuerySchema> {\n  const query = ActiveAppVersionQuery\n  const result: ActiveAppVersionQuerySchema = await partnersRequest(query, token, {\n    apiKey,\n  })\n  return result\n}\n\n/**\n * Fetch all organizations the user belongs to\n * If the user doesn't belong to any org, throw an error\n * @param token - Token to access partners API\n * @returns List of organizations\n */\nexport async function fetchOrganizations(token: string) {\n  const query = AllOrganizationsQuery\n  const result: AllOrganizationsQuerySchema = await partnersRequest(query, token)\n  const organizations = result.organizations.nodes\n  if (organizations.length === 0) throw new NoOrgError()\n  return organizations\n}\n\n/**\n * Fetch all apps and stores for the given organization\n * @param orgId - Organization ID\n * @param token - Token to access partners API\n * @returns Current organization details and list of apps and stores\n */\nexport async function fetchOrgAndApps(orgId: string, token: string, title?: string): Promise<FetchResponse> {\n  const query = FindOrganizationQuery\n  const params: {id: string; title?: string} = {id: orgId}\n  if (title) params.title = title\n  const result: FindOrganizationQuerySchema = await partnersRequest(query, token, params)\n  const org = result.organizations.nodes[0]\n  if (!org) throw new NoOrgError(orgId)\n  const parsedOrg = {id: org.id, businessName: org.businessName}\n  return {organization: parsedOrg, apps: org.apps, stores: []}\n}\n\nexport async function fetchAppDetailsFromApiKey(apiKey: string, token: string): Promise<OrganizationApp | undefined> {\n  const res: FindAppQuerySchema = await partnersRequest(FindAppQuery, token, {\n    apiKey,\n  })\n  return res.app\n}\n\nexport async function fetchAppPreviewMode(apiKey: string, token: string): Promise<boolean | undefined> {\n  const res: FindAppPreviewModeQuerySchema = await partnersRequest(FindAppPreviewModeQuery, token, {\n    apiKey,\n  })\n  return res.app?.developmentStorePreviewEnabled\n}\n\nexport async function fetchOrgFromId(id: string, token: string): Promise<Organization> {\n  const query = FindOrganizationBasicQuery\n  const res: FindOrganizationBasicQuerySchema = await partnersRequest(query, token, {id})\n  const org = res.organizations.nodes[0]\n  if (!org) throw new NoOrgError(id)\n  return org\n}\n\nexport async function fetchAllDevStores(orgId: string, token: string): Promise<OrganizationStore[]> {\n  const query = AllDevStoresByOrganizationQuery\n  const result: AllDevStoresByOrganizationSchema = await partnersRequest(query, token, {\n    id: orgId,\n  })\n  return result.organizations.nodes[0]!.stores.nodes\n}\n\ninterface FetchStoreByDomainOutput {\n  organization: Organization\n  store?: OrganizationStore\n}\n/**\n * Returns the organization and the store based on passed domain\n * If a store with that domain doesn't exist the method returns undefined\n * @param orgId - Organization ID\n * @param token - Token to access partners API\n * @param shopDomain - shop domain fqdn\n */\nexport async function fetchStoreByDomain(\n  orgId: string,\n  token: string,\n  shopDomain: string,\n): Promise<FetchStoreByDomainOutput | undefined> {\n  const query = FindStoreByDomainQuery\n  const result: FindStoreByDomainSchema = await partnersRequest(query, token, {\n    id: orgId,\n    shopDomain,\n  })\n  const org = result.organizations.nodes[0]\n  if (!org) {\n    return undefined\n  }\n\n  const parsedOrg = {id: org.id, businessName: org.businessName}\n  const store = org.stores.nodes[0]\n\n  return {organization: parsedOrg, store}\n}\n"]}