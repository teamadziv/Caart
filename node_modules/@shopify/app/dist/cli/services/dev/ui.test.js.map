{"version":3,"file":"ui.test.js","sourceRoot":"","sources":["../../../../src/cli/services/dev/ui.test.tsx"],"names":[],"mappings":"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","sourcesContent":["import {outputUpdateURLsResult} from './ui.js'\nimport {\n  testApp,\n  testFunctionExtension,\n  testOrganizationApp,\n  testThemeExtensions,\n  testUIExtension,\n} from '../../models/app/app.test-data.js'\nimport {AppInterface} from '../../models/app/app.js'\nimport {afterEach, describe, expect, test} from 'vitest'\nimport {mockAndCaptureOutput} from '@shopify/cli-kit/node/testing/output'\nimport {joinPath} from '@shopify/cli-kit/node/path'\n\nafterEach(() => {\n  mockAndCaptureOutput().clear()\n})\n\ndescribe('output', () => {\n  describe('outputUpdateURLsResult', () => {\n    const urls = {\n      applicationUrl: 'https://lala.cloudflare.io/',\n      redirectUrlWhitelist: ['https://lala.cloudflare.io/auth/callback'],\n    }\n\n    test('shows info about tunnel URL and links to Partners Dashboard when app is brand new', async () => {\n      // Given\n      const outputMock = mockAndCaptureOutput()\n      const localApp = await mockApp()\n\n      const remoteApp = testOrganizationApp({newApp: true})\n\n      // When\n      await outputUpdateURLsResult(true, urls, remoteApp, localApp)\n\n      // Then\n      expect(outputMock.output()).toMatchInlineSnapshot(`\n        \"╭─ info ───────────────────────────────────────────────────────────────────────╮\n        │                                                                              │\n        │  For your convenience, we've given your app a default URL:                   │\n        │  https://lala.cloudflare.io/.                                                │\n        │                                                                              │\n        │  You can update your app's URL anytime in the Partners Dashboard [1] But     │\n        │  once your app is live, updating its URL will disrupt user access.           │\n        │                                                                              │\n        ╰──────────────────────────────────────────────────────────────────────────────╯\n        [1] https://partners.shopify.com/1/apps/1/edit\n        \"\n      `)\n    })\n\n    test('shows nothing when urls were updated', async () => {\n      // Given\n      const outputMock = mockAndCaptureOutput()\n      const localApp = await mockApp()\n\n      const remoteApp = testOrganizationApp({newApp: false})\n\n      // When\n      await outputUpdateURLsResult(true, urls, remoteApp, localApp)\n\n      // Then\n      expect(outputMock.output()).toEqual('')\n    })\n\n    test('shows how to update app urls on partners when app is not brand new, urls were not updated and app uses legacy config', async () => {\n      // Given\n      const outputMock = mockAndCaptureOutput()\n      const localApp = await mockApp()\n\n      const remoteApp = testOrganizationApp({newApp: false})\n\n      // When\n      await outputUpdateURLsResult(false, urls, remoteApp, localApp)\n\n      // Then\n      expect(outputMock.output()).toMatchInlineSnapshot(`\n        \"╭─ info ───────────────────────────────────────────────────────────────────────╮\n        │                                                                              │\n        │  To make URL updates manually, you can add the following URLs as redirects   │\n        │  in your Partners Dashboard [1]:                                             │\n        │                                                                              │\n        │                                                                              │\n        │    • https://lala.cloudflare.io/auth/callback                                │\n        │                                                                              │\n        ╰──────────────────────────────────────────────────────────────────────────────╯\n        [1] https://partners.shopify.com/1/apps/1/edit\n        \"\n      `)\n    })\n\n    test('shows how to update app urls with config push when app is not brand new, urls were updated and app uses new config', async () => {\n      // Given\n      const outputMock = mockAndCaptureOutput()\n      const localApp = await mockApp(true)\n\n      const remoteApp = testOrganizationApp({newApp: false})\n\n      // When\n      await outputUpdateURLsResult(false, urls, remoteApp, localApp)\n\n      // Then\n      expect(outputMock.output()).toMatchInlineSnapshot(`\n        \"╭─ info ───────────────────────────────────────────────────────────────────────╮\n        │                                                                              │\n        │  To update URLs manually, add the following URLs to                          │\n        │  shopify.app.staging.toml under auth > redirect_urls and run                 │\n        │   \\`yarn shopify app config push --config=staging\\`                            │\n        │                                                                              │\n        │                                                                              │\n        │    • https://lala.cloudflare.io/auth/callback                                │\n        │                                                                              │\n        ╰──────────────────────────────────────────────────────────────────────────────╯\n        \"\n      `)\n    })\n  })\n})\n\nasync function mockApp(newConfig = false): Promise<AppInterface> {\n  const nodeDependencies: {[key: string]: string} = {}\n  nodeDependencies['@shopify/cli'] = '2.2.2'\n\n  const functionExtension = await testFunctionExtension()\n  const themeExtension = await testThemeExtensions()\n  const uiExtension = await testUIExtension()\n  const configurationPath = joinPath('/', newConfig ? 'shopify.app.staging.toml' : 'shopify.app.toml')\n\n  const result = testApp(\n    {\n      name: 'my-super-customer-accounts-app',\n      directory: '/',\n      nodeDependencies,\n      allExtensions: [functionExtension, themeExtension, uiExtension],\n    },\n    newConfig ? 'current' : 'legacy',\n  )\n  result.configuration.path = configurationPath\n\n  return result\n}\n"]}