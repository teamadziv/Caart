/// <reference types="node" resolution-mode="require"/>
import { DeploymentMode } from './deploy/mode.js';
import { AppInterface, Web } from '../models/app/app.js';
import { ExtensionInstance } from '../models/extensions/extension-instance.js';
import { AbortSignal } from '@shopify/cli-kit/node/abort';
import { Config } from '@oclif/core';
import { Writable } from 'stream';
export declare const MANIFEST_VERSION = "3";
export interface DevOptions {
    directory: string;
    id?: number;
    configName?: string;
    apiKey?: string;
    storeFqdn?: string;
    reset: boolean;
    update: boolean;
    commandConfig: Config;
    skipDependenciesInstallation: boolean;
    subscriptionProductUrl?: string;
    checkoutCartUrl?: string;
    tunnelUrl?: string;
    noTunnel: boolean;
    theme?: string;
    themeExtensionPort?: number;
    notify?: string;
}
declare function dev(options: DevOptions): Promise<void>;
export declare function setPreviousAppId(directory: string, apiKey: string): void;
export interface LaunchWebOptions {
    port: number;
    apiKey: string;
    apiSecret?: string;
    hostname?: string;
    backendPort: number;
    frontendServerPort?: number;
    directory: string;
    devCommand: string;
    scopes?: string;
    shopCustomDomain?: string;
    hmrServerOptions?: {
        port: number;
        httpPaths: string[];
    };
    portFromConfig?: number;
}
export declare function launchWebProcess({ stdout, stderr, abortSignal }: {
    stdout: Writable;
    stderr: Writable;
    abortSignal: AbortSignal;
}, { port, apiKey, apiSecret, hostname, backendPort, frontendServerPort, directory, devCommand, scopes, shopCustomDomain, hmrServerOptions, }: LaunchWebOptions): Promise<void>;
interface DevDraftableExtensionsOptions {
    app: AppInterface;
    apiKey: string;
    url: string;
    token: string;
    extensions: ExtensionInstance[];
    remoteExtensions: {
        [key: string]: string;
    };
    unifiedDeployment: boolean;
}
export declare function devDraftableExtensionTarget({ extensions, app, url, apiKey, token, remoteExtensions, unifiedDeployment, }: DevDraftableExtensionsOptions): {
    prefix: string;
    action: (stdout: Writable, stderr: Writable, signal: AbortSignal) => Promise<void>;
};
/**
 * To prepare Checkout UI Extensions for dev'ing we need to retrieve a valid product variant ID
 * @param extensions - The UI Extensions to dev
 * @param store - The store FQDN
 */
export declare function buildCartURLIfNeeded(extensions: ExtensionInstance[], store: string, checkoutCartUrl?: string): Promise<string | undefined>;
export declare function logMetadataForDev(options: {
    devOptions: DevOptions;
    tunnelUrl: string;
    shouldUpdateURLs: boolean;
    storeFqdn: string;
    deploymentMode: DeploymentMode | undefined;
}): Promise<void>;
export declare function validateCustomPorts(webConfigs: Web[]): Promise<void>;
export declare function scopesMessage(scopes: string[]): {
    list: {
        items: string[];
    };
};
export default dev;
