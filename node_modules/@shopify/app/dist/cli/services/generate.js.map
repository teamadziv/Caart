{"version":3,"file":"generate.js","sourceRoot":"","sources":["../../../src/cli/services/generate.ts"],"names":[],"mappings":"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","sourcesContent":["import {ensureGenerateContext} from './context.js'\nimport {fetchSpecifications} from './generate/fetch-extension-specifications.js'\nimport {AppInterface} from '../models/app/app.js'\nimport {load as loadApp} from '../models/app/loader.js'\nimport {GenericSpecification} from '../models/app/extensions.js'\nimport generateExtensionPrompt from '../prompts/generate/extension.js'\nimport metadata from '../metadata.js'\nimport generateExtensionService, {ExtensionFlavor} from '../services/generate/extension.js'\nimport {PackageManager} from '@shopify/cli-kit/node/node-package-manager'\nimport {Config} from '@oclif/core'\nimport {ensureAuthenticatedPartners} from '@shopify/cli-kit/node/session'\nimport {isShopify} from '@shopify/cli-kit/node/context/local'\nimport {joinPath} from '@shopify/cli-kit/node/path'\nimport {RenderAlertOptions, renderSuccess} from '@shopify/cli-kit/node/ui'\nimport {AbortError} from '@shopify/cli-kit/node/error'\nimport {formatPackageManagerCommand} from '@shopify/cli-kit/node/output'\nimport {groupBy} from '@shopify/cli-kit/common/collection'\n\nexport interface GenerateOptions {\n  directory: string\n  reset: boolean\n  config: Config\n  apiKey?: string\n  type?: string\n  template?: string\n  name?: string\n  cloneUrl?: string\n}\n\nasync function generate(options: GenerateOptions) {\n  const token = await ensureAuthenticatedPartners()\n  const apiKey = await ensureGenerateContext({...options, token})\n  const specifications = await fetchSpecifications({token, apiKey, config: options.config})\n  const app: AppInterface = await loadApp({directory: options.directory, specifications})\n\n  // If the user has specified a type, we need to validate it\n  const specification = findSpecification(options.type, specifications)\n  const allExternalTypes = specifications.map((spec) => spec.externalIdentifier)\n\n  if (options.type && !specification) {\n    const isShopifolk = await isShopify()\n    const tryMsg = isShopifolk ? 'You might need to enable some beta flags on your Organization or App' : undefined\n    throw new AbortError(\n      `Unknown extension type: ${options.type}.\\nThe following extension types are supported: ${allExternalTypes.join(\n        ', ',\n      )}`,\n      tryMsg,\n    )\n  }\n\n  // Validate limits for selected type.\n  // If no type is selected, filter out any types that have reached their limit\n  if (specification) {\n    const existing = app.extensionsForType(specification)\n    const limit = specification.registrationLimit\n    if (existing.length >= limit) {\n      throw new AbortError(\n        'Invalid extension type',\n        `You can only generate ${limit} extension(s) of type ${specification.externalIdentifier} per app`,\n      )\n    }\n  }\n\n  const {validSpecifications, overlimit} = groupBy(specifications, (spec) =>\n    app.extensionsForType(spec).length < spec.registrationLimit ? 'validSpecifications' : 'overlimit',\n  )\n\n  validateExtensionFlavor(specification, options.template)\n\n  const promptAnswers = await generateExtensionPrompt({\n    extensionType: specification?.identifier || options.type,\n    name: options.name,\n    extensionFlavor: options.template,\n    directory: joinPath(options.directory, 'extensions'),\n    app,\n    extensionSpecifications: validSpecifications ?? [],\n    unavailableExtensions: overlimit?.map((spec) => spec.externalName) ?? [],\n    reset: options.reset,\n  })\n\n  const {extensionType, extensionFlavor, name} = promptAnswers\n  const selectedSpecification = findSpecification(extensionType, specifications)\n  if (!selectedSpecification) {\n    throw new AbortError(`The following extension types are supported: ${allExternalTypes.join(', ')}`)\n  }\n\n  await metadata.addPublicMetadata(() => ({\n    cmd_scaffold_template_flavor: extensionFlavor,\n    cmd_scaffold_type: extensionType,\n    cmd_scaffold_type_category: selectedSpecification.category(),\n    cmd_scaffold_type_gated: selectedSpecification.gated,\n    cmd_scaffold_used_prompts_for_type: extensionType !== options.type,\n  }))\n\n  const extensionDirectory = await generateExtensionService({\n    name,\n    extensionFlavor: extensionFlavor as ExtensionFlavor,\n    specification: selectedSpecification,\n    app,\n    extensionType: selectedSpecification.identifier,\n    cloneUrl: options.cloneUrl,\n  })\n\n  const formattedSuccessfulMessage = formatSuccessfulRunMessage(\n    selectedSpecification,\n    extensionDirectory,\n    app.packageManager,\n  )\n  renderSuccess(formattedSuccessfulMessage)\n}\n\nfunction findSpecification(type: string | undefined, specifications: GenericSpecification[]) {\n  return specifications.find((spec) => spec.identifier === type || spec.externalIdentifier === type)\n}\n\nfunction validateExtensionFlavor(specification: GenericSpecification | undefined, flavor: string | undefined) {\n  if (!flavor || !specification) return\n\n  const possibleFlavors = specification.supportedFlavors.map((flavor) => flavor.value as string)\n  if (!possibleFlavors.includes(flavor)) {\n    throw new AbortError(\n      'Invalid template for extension type',\n      `Expected template to be one of the following: ${possibleFlavors.join(', ')}.`,\n    )\n  }\n}\n\nfunction formatSuccessfulRunMessage(\n  specification: GenericSpecification,\n  extensionDirectory: string,\n  depndencyManager: PackageManager,\n): RenderAlertOptions {\n  const options: RenderAlertOptions = {\n    headline: ['Your extension was created in', {filePath: extensionDirectory}, {char: '.'}],\n    nextSteps: [],\n    reference: [],\n  }\n\n  if (specification.category() === 'ui' || specification.category() === 'theme') {\n    options.nextSteps!.push([\n      'To preview this extension along with the rest of the project, run',\n      {command: `${formatPackageManagerCommand(depndencyManager, 'dev')}`},\n    ])\n  }\n\n  if (specification.helpURL) {\n    options.reference!.push(['For more details, see the', {link: {label: 'docs', url: specification.helpURL}}])\n  }\n\n  return options\n}\n\nexport default generate\n"]}