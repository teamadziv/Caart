{"version":3,"file":"deploy.js","sourceRoot":"","sources":["../../../../src/cli/commands/app/deploy.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,QAAQ,EAAC,MAAM,gBAAgB,CAAA;AACvC,OAAO,EAAC,MAAM,EAAC,MAAM,0BAA0B,CAAA;AAE/C,OAAO,EAAC,IAAI,IAAI,OAAO,EAAC,MAAM,4BAA4B,CAAA;AAC1D,OAAO,OAAO,MAAM,gCAAgC,CAAA;AACpD,OAAO,EAAC,4BAA4B,EAAC,MAAM,2CAA2C,CAAA;AACtF,OAAO,EAAC,KAAK,EAAC,MAAM,aAAa,CAAA;AACjC,OAAO,EAAC,WAAW,EAAC,MAAM,2BAA2B,CAAA;AACrD,OAAO,EAAC,WAAW,EAAE,GAAG,EAAC,MAAM,4BAA4B,CAAA;AAC3D,OAAO,EAAC,iBAAiB,EAAC,MAAM,gCAAgC,CAAA;AAEhE,MAAM,CAAC,OAAO,OAAO,MAAO,SAAQ,OAAO;IA0BzC,KAAK,CAAC,GAAG;QACP,MAAM,EAAC,IAAI,EAAE,KAAK,EAAC,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;QAE9C,MAAM,iBAAiB,CAAC,GAAG,EAAE,CAAC,CAAC;YAC7B,kBAAkB,EAAE,KAAK,CAAC,KAAK;SAChC,CAAC,CAAC,CAAA;QAEH,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAA;QAC9D,MAAM,cAAc,GAAG,MAAM,4BAA4B,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QACtE,MAAM,GAAG,GAAiB,MAAM,OAAO,CAAC,EAAC,SAAS,EAAE,cAAc,EAAC,CAAC,CAAA;QACpE,MAAM,MAAM,CAAC,EAAC,GAAG,EAAE,MAAM,EAAE,KAAK,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,KAAK,EAAC,CAAC,CAAA;IACvF,CAAC;;AApCM,kBAAW,GAAG,0BAA0B,CAAA;AAExC,YAAK,GAAG;IACb,GAAG,WAAW;IACd,GAAG,QAAQ;IACX,SAAS,EAAE,KAAK,CAAC,MAAM,CAAC;QACtB,MAAM,EAAE,KAAK;QACb,WAAW,EAAE,0BAA0B;QACvC,GAAG,EAAE,0BAA0B;KAChC,CAAC;IACF,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC;QACnB,MAAM,EAAE,KAAK;QACb,WAAW,EAAE,0BAA0B;QACvC,GAAG,EAAE,oBAAoB;QACzB,OAAO,EAAE,KAAK;KACf,CAAC;IACF,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC;QACnB,MAAM,EAAE,KAAK;QACb,WAAW,EAAE,yCAAyC;QACtD,GAAG,EAAE,oBAAoB;QACzB,IAAI,EAAE,GAAG;QACT,OAAO,EAAE,KAAK;KACf,CAAC;CACH,CAAA","sourcesContent":["import {appFlags} from '../../flags.js'\nimport {deploy} from '../../services/deploy.js'\nimport {AppInterface} from '../../models/app/app.js'\nimport {load as loadApp} from '../../models/app/loader.js'\nimport Command from '../../utilities/app-command.js'\nimport {loadExtensionsSpecifications} from '../../models/extensions/specifications.js'\nimport {Flags} from '@oclif/core'\nimport {globalFlags} from '@shopify/cli-kit/node/cli'\nimport {resolvePath, cwd} from '@shopify/cli-kit/node/path'\nimport {addPublicMetadata} from '@shopify/cli-kit/node/metadata'\n\nexport default class Deploy extends Command {\n  static description = 'Deploy your Shopify app.'\n\n  static flags = {\n    ...globalFlags,\n    ...appFlags,\n    'api-key': Flags.string({\n      hidden: false,\n      description: 'The API key of your app.',\n      env: 'SHOPIFY_FLAG_APP_API_KEY',\n    }),\n    reset: Flags.boolean({\n      hidden: false,\n      description: 'Reset all your settings.',\n      env: 'SHOPIFY_FLAG_RESET',\n      default: false,\n    }),\n    force: Flags.boolean({\n      hidden: false,\n      description: 'Deploy without asking for confirmation.',\n      env: 'SHOPIFY_FLAG_FORCE',\n      char: 'f',\n      default: false,\n    }),\n  }\n\n  async run(): Promise<void> {\n    const {args, flags} = await this.parse(Deploy)\n\n    await addPublicMetadata(() => ({\n      cmd_app_reset_used: flags.reset,\n    }))\n\n    const directory = flags.path ? resolvePath(flags.path) : cwd()\n    const specifications = await loadExtensionsSpecifications(this.config)\n    const app: AppInterface = await loadApp({directory, specifications})\n    await deploy({app, apiKey: flags['api-key'], reset: flags.reset, force: flags.force})\n  }\n}\n"]}