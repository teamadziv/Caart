{"version":3,"file":"options-prompt.js","sourceRoot":"","sources":["../../../../src/cli/prompts/webhook/options-prompt.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  addressPrompt,\n  apiVersionPrompt,\n  deliveryMethodInstructions,\n  deliveryMethodPrompt,\n  clientSecretPrompt,\n  topicPrompt,\n} from './trigger.js'\nimport {\n  DELIVERY_METHOD,\n  deliveryMethodForAddress,\n  isAddressAllowedForDeliveryMethod,\n} from '../../services/webhook/trigger-options.js'\nimport {AbortError} from '@shopify/cli-kit/node/error'\n\n/**\n * Flags collected from the command line parameters\n */\nexport interface WebhookTriggerFlags {\n  topic?: string\n  apiVersion?: string\n  deliveryMethod?: string\n  address?: string\n  clientSecret?: string\n}\n\nexport async function collectApiVersion(apiVersion: string | undefined, availableVersions: string[]): Promise<string> {\n  const apiVersionPassed = flagPassed(apiVersion)\n\n  if (apiVersionPassed) {\n    const passedApiVersion = (apiVersion as string).trim()\n    if (availableVersions.includes(passedApiVersion)) {\n      return passedApiVersion\n    }\n    throw new AbortError(\n      `Api Version '${passedApiVersion}' does not exist`,\n      `Allowed values: ${availableVersions.join(', ')}`,\n      ['Try again with a valid api-version value'],\n    )\n  }\n\n  const promptedApiVersion = await apiVersionPrompt(availableVersions)\n\n  return promptedApiVersion\n}\n\nexport async function collectTopic(\n  topic: string | undefined,\n  apiVersion: string,\n  availableTopics: string[],\n): Promise<string> {\n  const topicPassed = flagPassed(topic)\n\n  if (topicPassed) {\n    const passedTopic = equivalentTopic((topic as string).trim(), availableTopics)\n\n    if (passedTopic === undefined) {\n      throw new AbortError(\n        `Topic '${passedTopic}' does not exist for ApiVersion '${apiVersion}'`,\n        `Allowed values: ${availableTopics.join(', ')}`,\n        ['Try again with a valid api-version - topic pair'],\n      )\n    }\n\n    return passedTopic\n  }\n\n  if (availableTopics.length === 0) {\n    throw new AbortError(`No topics found for '${apiVersion}'`)\n  }\n  const promptedTopic = await topicPrompt(availableTopics)\n\n  return promptedTopic\n}\n\nexport async function collectAddressAndMethod(\n  deliveryMethod: string | undefined,\n  address: string | undefined,\n): Promise<[string, string]> {\n  const methodWasPassed = flagPassed(deliveryMethod)\n  const addressWasPassed = flagPassed(address)\n\n  if (methodWasPassed && !validDeliveryMethodFlag(deliveryMethod)) {\n    throw new AbortError(\n      'Invalid Delivery Method passed',\n      `${DELIVERY_METHOD.HTTP}, ${DELIVERY_METHOD.PUBSUB}, and ${DELIVERY_METHOD.EVENTBRIDGE} are allowed`,\n      ['Try again with a valid delivery method'],\n    )\n  }\n  // Method is valid\n\n  let actualAddress = ''\n  let actualMethod = ''\n\n  if (methodWasPassed && addressWasPassed) {\n    if (isAddressAllowedForDeliveryMethod(address as string, deliveryMethod as string)) {\n      actualAddress = (address as string).trim()\n      actualMethod = inferMethodFromAddress(actualAddress)\n    } else {\n      throw new AbortError(\n        `Can't deliver your webhook payload to this address using '${deliveryMethod}'`,\n        \"Run 'shopify webhook trigger --address=<VALUE>' with a valid URL\",\n        deliveryMethodInstructions(deliveryMethod as string),\n      )\n    }\n  }\n\n  if (!methodWasPassed && addressWasPassed) {\n    actualAddress = (address as string).trim()\n    actualMethod = inferMethodFromAddress(actualAddress)\n  }\n\n  if (methodWasPassed && !addressWasPassed) {\n    actualAddress = await addressPrompt(deliveryMethod as string)\n    actualMethod = inferMethodFromAddress(actualAddress)\n  }\n\n  if (!methodWasPassed && !addressWasPassed) {\n    const method = await deliveryMethodPrompt()\n    actualAddress = await addressPrompt(method)\n    actualMethod = inferMethodFromAddress(actualAddress)\n  }\n\n  return [actualMethod, actualAddress]\n}\n\nexport async function collectSecret(clientSecret: string | undefined): Promise<string> {\n  const secret = await useFlagOrPrompt(clientSecret, clientSecretPrompt)\n\n  return secret\n}\n\nasync function useFlagOrPrompt(value: string | undefined, prompt: () => Promise<string>): Promise<string> {\n  return flagPassed(value) ? (value as string) : prompt()\n}\n\nfunction flagPassed(flag: string | undefined) {\n  if (flag === undefined) {\n    return false\n  }\n\n  return flag.length > 0\n}\n\nfunction validDeliveryMethodFlag(value: string | undefined): boolean {\n  return value === DELIVERY_METHOD.HTTP || value === DELIVERY_METHOD.PUBSUB || value === DELIVERY_METHOD.EVENTBRIDGE\n}\n\nfunction inferMethodFromAddress(address: string): string {\n  const method = deliveryMethodForAddress(address)\n  if (method === undefined) {\n    throw new AbortError(\n      'No delivery method available for the address',\n      `Use a valid address for ${DELIVERY_METHOD.HTTP}, ${DELIVERY_METHOD.PUBSUB} or ${DELIVERY_METHOD.EVENTBRIDGE}`,\n    )\n  }\n\n  return method\n}\n\nfunction equivalentTopic(passedTopic: string, availableTopics: string[]): string | undefined {\n  if (availableTopics.includes(passedTopic)) {\n    return passedTopic\n  }\n\n  return availableTopics.find((elm) => elm.toUpperCase().replace('/', '_') === passedTopic)\n}\n"]}