{"version":3,"file":"extension.js","sourceRoot":"","sources":["../../../../src/cli/prompts/generate/extension.ts"],"names":[],"mappings":"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","sourcesContent":["import {extensionTypesGroups} from '../../constants.js'\nimport {AppInterface} from '../../models/app/app.js'\nimport {GenericSpecification} from '../../models/app/extensions.js'\nimport {generateRandomNameForSubdirectory} from '@shopify/cli-kit/node/fs'\nimport {renderSelectPrompt, renderTextPrompt} from '@shopify/cli-kit/node/ui'\nimport {outputWarn} from '@shopify/cli-kit/node/output'\n\ninterface GenerateExtensionOptions {\n  name?: string\n  extensionType?: string\n  extensionFlavor?: string\n  directory: string\n  app: AppInterface\n  extensionSpecifications: GenericSpecification[]\n  unavailableExtensions: string[]\n  reset: boolean\n}\n\ninterface GenerateExtensionOutput {\n  name: string\n  extensionType: string\n  extensionFlavor?: string\n}\n\nexport function buildChoices(specifications: GenericSpecification[]) {\n  return specifications\n    .map((type) => {\n      const choiceWithoutGroup = {\n        label: type.externalName,\n        value: type.identifier,\n      }\n      const group = extensionTypesGroups.find((group) => includes(group.extensions, type.identifier))\n      if (group) {\n        return {\n          ...choiceWithoutGroup,\n          group: group.name,\n        }\n      }\n      return choiceWithoutGroup\n    })\n    .sort((c1, c2) => c1.label.localeCompare(c2.label))\n}\n\nconst generateExtensionPrompt = async (options: GenerateExtensionOptions): Promise<GenerateExtensionOutput> => {\n  let allExtensions = options.extensionSpecifications\n  let extensionType = options.extensionType\n  let name = options.name\n  let extensionFlavor = options.extensionFlavor\n\n  if (!extensionType) {\n    if (extensionFlavor) {\n      allExtensions = allExtensions.filter((spec) =>\n        spec.supportedFlavors.map((elem) => elem.value as string).includes(extensionFlavor!),\n      )\n    }\n\n    outputWarn(`You've reached the limit for these types of extensions: ${options.unavailableExtensions.join(', ')}\\n`)\n    // eslint-disable-next-line require-atomic-updates\n    extensionType = await renderSelectPrompt({\n      message: 'Type of extension?',\n      choices: buildChoices(allExtensions),\n    })\n  }\n  if (!name) {\n    name = await renderTextPrompt({\n      message: 'Extension name (internal only)',\n      defaultValue: await generateRandomNameForSubdirectory({suffix: 'ext', directory: options.directory}),\n    })\n  }\n  const specification = options.extensionSpecifications.find((spec) => spec.identifier === extensionType)!\n  if (!extensionFlavor && specification.supportedFlavors.length > 1) {\n    // eslint-disable-next-line require-atomic-updates\n    extensionFlavor = await renderSelectPrompt({\n      message: 'What would you like to work in?',\n      choices: specification.supportedFlavors.map((flavor) => {\n        return {\n          label: flavor.name,\n          value: flavor.value,\n        }\n      }),\n      defaultValue: 'react',\n    })\n  }\n  return {...options, name, extensionType, extensionFlavor}\n}\n\nfunction includes<TNarrow extends TWide, TWide>(coll: ReadonlyArray<TNarrow>, el: TWide): el is TNarrow {\n  return coll.includes(el as TNarrow)\n}\n\nexport default generateExtensionPrompt\n"]}