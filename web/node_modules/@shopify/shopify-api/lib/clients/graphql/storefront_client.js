"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.storefrontClientClass = exports.StorefrontClient = void 0;
const version_1 = require("../../version");
const types_1 = require("../../types");
const http_client_1 = require("../http_client/http_client");
const session_1 = require("../../session/session");
const logger_1 = require("../../logger");
const error_1 = require("../../error");
const versioned_codeblocks_1 = require("../../utils/versioned-codeblocks");
const graphql_client_1 = require("./graphql_client");
class StorefrontClient extends graphql_client_1.GraphqlClient {
    constructor(params) {
        let session;
        if (isDeprecatedParamsType(params)) {
            session = new session_1.Session({
                shop: params.domain,
                id: '',
                state: '',
                isOnline: true,
                accessToken: params.storefrontAccessToken,
            });
        }
        else {
            session = params.session;
        }
        super({ session, apiVersion: params.apiVersion });
        this.baseApiPath = '/api';
        /** @deprecated This package should not use public Storefront API tokens */
        this.tokenHeader = types_1.ShopifyHeader.StorefrontPrivateToken;
        const config = this.storefrontClass().config;
        if (params.apiVersion) {
            const message = params.apiVersion === config.apiVersion
                ? `Storefront client has a redundant API version override to the default ${params.apiVersion}`
                : `Storefront client overriding default API version ${config.apiVersion} with ${params.apiVersion}`;
            (0, logger_1.logger)(config).debug(message);
        }
        if (isDeprecatedParamsType(params)) {
            this.tokenHeader = types_1.ShopifyHeader.StorefrontAccessToken;
            this.storefrontAccessToken = params.storefrontAccessToken;
            (0, logger_1.logger)(config).deprecated('8.0.0', [
                'The domain and storefrontAccessToken params are deprecated, because they assume public access tokens for the Storefront API.',
                'Apps should not use public Storefront API tokens for backend requests. Pass the session param instead.',
                'See https://shopify.dev/docs/api/usage/authentication#access-tokens-for-the-storefront-api for more information.',
            ].join('\n'));
        }
        this.session = session;
    }
    getApiHeaders() {
        const config = this.storefrontClass().config;
        let accessToken;
        if (config.isCustomStoreApp) {
            accessToken = config.privateAppStorefrontAccessToken;
            if (!accessToken) {
                (0, versioned_codeblocks_1.enableCodeAfterVersion)('8.0.0', () => {
                    throw new error_1.MissingRequiredArgument('Custom store apps must set the privateAppStorefrontAccessToken property to call the Storefront API.');
                });
                accessToken = this.session.accessToken || this.storefrontAccessToken;
            }
        }
        else {
            accessToken = this.session.accessToken;
            if (!accessToken) {
                throw new error_1.MissingRequiredArgument('Session missing access token.');
            }
        }
        const sdkVariant = types_1.LIBRARY_NAME.toLowerCase().split(' ').join('-');
        return {
            [this.tokenHeader]: accessToken,
            [types_1.ShopifyHeader.StorefrontSDKVariant]: sdkVariant,
            [types_1.ShopifyHeader.StorefrontSDKVersion]: version_1.SHOPIFY_API_LIBRARY_VERSION,
        };
    }
    storefrontClass() {
        return this.constructor;
    }
}
exports.StorefrontClient = StorefrontClient;
function storefrontClientClass(params) {
    const { config } = params;
    let { HttpClient } = params;
    if (!HttpClient) {
        HttpClient = (0, http_client_1.httpClientClass)(config);
    }
    class NewStorefrontClient extends StorefrontClient {
    }
    NewStorefrontClient.config = config;
    NewStorefrontClient.HttpClient = HttpClient;
    Reflect.defineProperty(NewStorefrontClient, 'name', {
        value: 'StorefrontClient',
    });
    return NewStorefrontClient;
}
exports.storefrontClientClass = storefrontClientClass;
function isDeprecatedParamsType(params) {
    return 'domain' in params;
}
//# sourceMappingURL=storefront_client.js.map